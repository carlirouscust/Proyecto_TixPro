@page "/Eventos/Edit/{eventoId:int}"
@inject NavigationManager NavigationManager
@inject EventosService eventosService
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]
<PageTitle>TixPro - Editar Evento</PageTitle>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: calc(100vh - 20px); 
        background-color: #fff;
        padding: 50px; 
        box-sizing: border-box; 
    }

    .card {
        border-radius: 1.5rem;
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.1);
        background-color: #fff;
        width: 100%; 
        max-width: 900px; 
        padding: 4rem;
    }

    .form-floating input {
        border-radius: 2rem;
        padding: 1rem;
        font-size: 1.5rem;
    }

    .btn-custom {
        border: none;
        padding: 1rem 1.5rem;
        border-radius: 0.75rem;
        font-weight: bold;
        font-size: 1.25rem;
        color: white;
        transition: background-color 0.3s, transform 0.2s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-save {
        background-color: green; 
        font-size: 1.5rem; 
        width: 450px; 
        padding: 1rem 2rem;
    }

        .btn-save:hover {
            background-color: darkgreen; 
            transform: translateY(-2px);
        }

    .btn-back {
        background-color: black; 
        width: 150px; 
    }

        .btn-back:hover {
            background-color: #1e40af; 
            transform: translateY(-2px);
        }

    .btn-group {
        display: flex;
        gap: 1rem;
        justify-content: center; 
    }

    .bi {
        margin-right: 0.5rem;
    }


    .text-center p a {
        color: black;
        text-decoration: none;
    }

        .text-center p a:hover {
            text-decoration: underline;
        }

    .form-floating textarea {
        height: 100px;
    }

    
    .preview-image {
        max-width: 100%;
        max-height: 300px;
        margin-top: 20px;
        object-fit: cover;
    }
</style>

<div class="login-container">
    <div class="card">
        <section>
            <h1 class="text-center mb-5" style="font-size: 2rem; font-weight: bold; color: #333;">Editar Evento</h1>
            <EditForm Model="evento" OnValidSubmit="Guardar" FormName="eventoForm">
                <DataAnnotationsValidator />

                <div class="form-floating mb-4">
                    <InputText @bind-Value="evento.nombre" class="form-control" placeholder="Nombre del evento" style="font-size: 1.1rem;" />
                    <label for="nombre" style="font-size: 1rem;">Nombre del Evento</label>
                    <ValidationMessage For="@(() => evento.nombre)" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputDate @bind-Value="evento.fecha" class="form-control" placeholder="Fecha del Evento" style="font-size: 1.1rem;" />
                    <label for="fecha" style="font-size: 1rem;">Fecha del Evento</label>
                    <ValidationMessage For="@(() => evento.fecha)" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="evento.hora" class="form-control" placeholder="Hora del Evento" style="font-size: 1.1rem;" type="time" />
                    <label for="hora" style="font-size: 1rem;">Hora del Evento</label>
                    <ValidationMessage For="@(() => evento.hora)" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText @bind-Value="evento.lugar" class="form-control" placeholder="Lugar del Evento" style="font-size: 1.1rem;" />
                    <label for="lugar" style="font-size: 1rem;">Lugar del Evento</label>
                    <ValidationMessage For="@(() => evento.lugar)" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="evento.precio" class="form-control" placeholder="Precio del Evento" style="font-size: 1.1rem;" />
                    <label for="precio" style="font-size: 1rem;">Precio del Evento</label>
                    <ValidationMessage For="@(() => evento.precio)" class="text-danger" />
                </div>

                <!-- Campo para seleccionar la imagen -->
                <div class="form-floating mb-3">
                    <InputFile OnChange="OnImageChange" class="form-control" />
                    <label for="imagen" style="font-size: 1rem;">Imagen del Evento</label>
                    <ValidationMessage For="@(() => evento.imagen)" class="text-danger" />
                </div>

                <div class="btn-group">
                    <button href="/" class="btn-custom btn-back">
                        <i class="bi bi-arrow-left"></i> Volver
                    </button>

                    <button class="btn-custom btn-save">
                        <i class="bi bi-download"></i> Guardar
                    </button>
                </div>

            </EditForm>
        </section>
    </div>
</div>
<!-- Footer-->
<footer class="py-5 bg-dark" style="border-top-left-radius: 20px; border-top-right-radius: 20px;">
    <div class="container"><p class="m-0 text-center text-white">Copyright  &copy; Ozcudi-Studios </p></div>
    <div style="text-align: center;">
        <a href="/About/Index">
            <button class="btn-custom2 bi bi-github"> Quienes somos </button>
        </a>
    </div>
</footer>

@code {
    [Parameter]
    public int eventoId { get; set; }
    public Evento evento { get; set; } = new Evento();
    public List<Evento> ListaEvento { get; set; } = new List<Evento>();
    public bool Existe { get; set; } = false;
    private string? errorMessage;
    private string? imagenPreview;

    protected override async Task OnInitializedAsync()
    {
        evento = await eventosService.Buscar(eventoId);
    }

    private async Task OnImageChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var stream = file.OpenReadStream();
            var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var base64Image = Convert.ToBase64String(memoryStream.ToArray());

            evento.imagen = $"data:{file.ContentType};base64,{base64Image}";

            imagenPreview = $"data:{file.ContentType};base64,{base64Image}";
            StateHasChanged();
        }
    }

    public async Task Guardar()
    {
        Console.WriteLine("Se llamó al método Guardar");
        Console.WriteLine($"Nombre: {evento.nombre}, Fecha: {evento.fecha}, Lugar: {evento.lugar}, Precio: {evento.precio}, Imagen: {evento.imagen}");

        var resultado = await eventosService.Guardar(evento);
        if (resultado)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Error al registrar el evento.";
            StateHasChanged();
        }
    }

    public void Nuevo()
    {
        evento = new Evento();
        Existe = false;
    }
}
