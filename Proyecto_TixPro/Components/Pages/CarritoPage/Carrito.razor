@page "/Ticket/Carrito/{eventoId:int}&{cantidad:int}&{monto:decimal}"

@using Microsoft.AspNetCore.Authorization

@inject EventosService eventosService
@inject UsuariosService usuarioService
@inject TicketService ticketSercive
@inject TarjetaService tarjetaService
@rendermode InteractiveServer
@inject NavigationManager navigationManager

@attribute [Authorize]

<PageTitle>TixPro - Carrito</PageTitle>

<style>
    .form-floating input {
        border-radius: 2rem;
        padding: 1rem;
        font-size: 1.5rem;
    }

    .tarjetas-container {
        display: flex;
        gap: 1rem; 
        flex-wrap: nowrap; 
    }

        .tarjetas-container .form-floating {
            flex: 1; 
            min-width: 0; 
        }

    .tight-hr {
        margin-top: 0.3rem; 
        margin-bottom: 0; 
        border-color: #ddd; 
    }

    .card-body p {
        margin-bottom: 0.2rem; 
    }

    .payment-container {
        display: flex;
        align-items: center; 
        gap: 600px; 
    }

    .payment-images {
        display: flex;
        gap: 10px; 
    }

    .payment-logo {
        height: 30px; 
        width: auto;
    }

   



</style>

<EditForm Model="usuario"  >
    <DataAnnotationsValidator />

    <div class="main-container">
        <div class="row">
        <!-- Contenedor Izquierdo: Detalles del Evento -->
                <div class="left-container col-md-6">
                    <h4 class="fw-bold">Datos de contacto</h4>

                    <div class="form-floating mb-2">                        
                        <InputText @bind-Value="@usuario.nombre" class="form-control col-md-6" placeholder="Nombre completo:" style="font-size: 1.1rem;" />
                        <label for="Nombre" class="form-label">Nombre completo:</label>
                        <ValidationMessage For="@(() => usuario.nombre)" />
                    </div>

                    <div class="form-floating mb-2">                        
                        <InputText @bind-Value="@usuario.whatsapp" class="form-control col-md-6" placeholder="Whatsapp:" style="font-size: 1.1rem;" />
                        <label for="Whatsapp" class="form-label">Whatsapp:</label>
                        <ValidationMessage For="@(() => usuario.whatsapp)" />
                    </div>
                    <!--Informacion de pago-->
                <h4 class ="fw-bold"> Información de pago</h4>
                <div class="card border-success mb-4">
                        <div class="payment-container card-header">
                             <h5 class="mb-0">Pago seguro con Tarjeta</h5>

                              <div class="payment-images">
                                <img src="https://i.pinimg.com/736x/2d/8f/2d/2d8f2d0c852509c079562c441baeec2d.jpg" alt="Visa" style="height: 40px;" />
                                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b7/MasterCard_Logo.svg/450px-MasterCard_Logo.svg.png" alt="Mastercard" style="height: 30px;" />
                             </div>                                                         
                        </div>

                    <div class="card-body mt-3">
                        <div class="form-floating mb-2">
                            <InputText @bind-Value="@tarjeta.nombreTitular" class="form-control" placeholder="Nombre titular tarjeta" />
                            <label for="nombreTitular" class="form-label">Nombre titular tarjeta</label>
                            <ValidationMessage For="@(() => tarjeta.nombreTitular)" />
                        </div>

                        <div class="form-floating mb-2">
                            <InputText @bind-Value="@tarjeta.numeroTarjeta" class="form-control" placeholder="Número de tarjeta" />
                            <label for="numeroTarjeta" class="form-label">Número de tarjeta</label>
                            <ValidationMessage For="@(() => tarjeta.numeroTarjeta)" />
                        </div>

                        <div class="row g-3 tarjetas-container">
                            <!-- Columna de Fecha de Expiración -->
                            <div class="form-floating mb-2">
                                <InputText @bind-Value="@tarjeta.fechaExpiracion" class="form-control" placeholder="Fecha de expiración" />
                                <label for="fechaExpiracion" class="form-label">Fecha de expiración (MM/AA)</label>
                                <ValidationMessage For="@(() => tarjeta.fechaExpiracion)" />
                            </div>
                            <!-- Columna de Código de Seguridad -->
                            <div class="form-floating mb-2">
                                <InputText @bind-Value="@tarjeta.codigoSeguridad" class="form-control" placeholder="Código de seguridad" />
                                <label for="codigoSeguridad" class="form-label">Código de seguridad (CVV)</label>
                                <ValidationMessage For="@(() => tarjeta.codigoSeguridad)" />
                            </div>                           
                        </div>
                        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                        {
                            <div class="alert alert-danger mt-3">@ErrorMessage</div>
                        }
                    </div>
                </div>

                <div class="d-flex justify-content-center gap-3 mt-3">
                    <a href="/Ticket/Compra/@evento.eventoId" class="btn btn-outline-dark rounded-pill" type="button"> Regresar</a>
                    <button @onclick="Guardar" class="btn btn-success rounded-pill">Pagar Ahora</button>
                </div>


                    
             </div>            
                <!-- Contenedor Derecho: Carrito de Compras -->
                <div class="right-container col-md-6 mx-auto d-flex flex-column justify-content-center align-items-center">             
                    <div class="row align-items-center w-100">
                        <!-- Columna para la imagen -->
                        <div class="col-md-6 d-flex justify-content-center">
                            <img class="card-img" src="@evento.imagen" alt="Imagen del Evento" style="height: 300px; width: auto;">
                        </div>
                        <!-- Columna para el contenido de texto -->
                        <div class="col-md-6">
                            <div class="card-body">
                                <h5 class="fw-bold">@evento.nombre</h5>
                            <p><i class="bi bi-geo-alt"></i> @evento.lugar</p>
                            <p class="mb-0 bi bi-calendar4-week"> @evento.fecha.ToString("dd/MM/yyyy")</p>
                            <p>
                                <i class="bi bi-alarm"></i>
                                @(DateTime.TryParse(evento.hora, out var horaEvento)
                                    ? $"{horaEvento:hh:mm tt}"
                                    : "Hora inválida")
                            </p>
                                <hr class="tight-hr" />
                                <p class="text-muted">
                                <span class="text-dark fw-bold">Precio:</span> RD$ @evento.precio
                            </p>
                                <p class="text-muted">
                                <span class="text-dark fw-bold">Cantidad:</span> @cantidad
                                </p>                       
                            <hr />
                            <p class="text-muted">
                                <span class="text-dark fw-bold">Sub Total:</span> RD$ @monto
                            </p>
                            <p class="text-muted">
                                <span class="text-dark fw-bold">Cargo de Servicio:</span> RD$ @(cargo * cantidad)
                            </p>
                            <p class="text-muted">
                                <span class="text-dark fw-bold">Total a Pagar:</span> RD$ @ticket.monto
                            </p>
                          
                            <hr />
                        </div>
                        </div>
                    </div>
                </div>
        </div>
        <div style="height: 190px;"></div>
    </div>

<!-- Footer-->
<footer class="py-5 bg-dark" style="border-top-left-radius: 20px; border-top-right-radius: 20px;">
    <div class="container"><p class="m-0 text-center text-white">Copyright  &copy; Ozcudi-Studios </p></div>
        <div style="text-align: center;">
            <a href="/About/Index">
                <button class="btn-custom bi bi-github"> Quienes somos </button>
            </a>
        </div>
</footer>
</EditForm>

@code {
    [Parameter]
    public int eventoId { get; set; }
    public int ticketId { get; set; }
    public Evento evento { get; set; } = new Evento();
    public int usuarioId { get; set; }
    public Usuario usuario { get; set; } = new Usuario();
    public Ticket ticket { get; set; } = new Ticket();
    public int tarjetaId { get; set; }
    public Tarjeta tarjeta { get; set; } = new Tarjeta();
    [Parameter]
    public int cantidad { get; set; }
    [Parameter]
    public decimal monto { get; set; }
    public decimal cargo = 10;
    public decimal montoTemporal;

    private string? ErrorMessage { get; set; } 

    protected override async Task OnInitializedAsync()
    {
        evento = await eventosService.Buscar(eventoId);
        CalcularTotal();
    }



    private void CalcularTotal()
    {   
        ticket.monto = (evento.precio * cantidad) + (cargo * cantidad);
    }

    private bool ValidarDatos()
    {
        ErrorMessage = null; 

      
        if (string.IsNullOrWhiteSpace(usuario.whatsapp))
        {
            return false; 
        }

        if (usuario.whatsapp.Length != 10 || !usuario.whatsapp.All(char.IsDigit))
        {
            ErrorMessage = "El número de WhatsApp no es valido. Formato sin (-)";
            return false;
        }
      
        if (string.IsNullOrWhiteSpace(tarjeta.numeroTarjeta) || tarjeta.numeroTarjeta.Length < 13 || tarjeta.numeroTarjeta.Length > 18 || !tarjeta.numeroTarjeta.All(char.IsDigit))
        {
            ErrorMessage = "El número de tarjeta no es valido";
            return false;
        }

        if (string.IsNullOrWhiteSpace(tarjeta.codigoSeguridad) || tarjeta.codigoSeguridad.Length < 3 || tarjeta.codigoSeguridad.Length > 4 || !tarjeta.codigoSeguridad.All(char.IsDigit))
        {
            ErrorMessage = "El código de seguridad (CVV) no es valido";
            return false;
        }

        return true; 
    }

    public async Task Guardar()
    {
        try
        {
            
            if (!ValidarDatos())
            {
                return; 
            }

            var tarjetaGuardada = await tarjetaService.Guardar(tarjeta);

            if (!tarjetaGuardada)
            {
                ErrorMessage = "Error al guardar la tarjeta. Por favor, intente de nuevo.";
                return;
            }

            usuario.tarjetaId = tarjeta.tarjetaId;

            var usuarioGuardado = await usuarioService.Guardar(usuario);

            if (!usuarioGuardado)
            {
                ErrorMessage = "Error al guardar el usuario. Por favor, intente de nuevo.";
                return;
            }

            ticket.usuarioId = usuario.usuarioId;
            ticket.eventoId = eventoId;
            ticket.cantidad = cantidad;
            ticket.GenerarCodigos();

            ticket.monto = (evento.precio * cantidad) + (cargo * cantidad);

            var ticketGuardado = await ticketSercive.Guardar(ticket);

            if (!ticketGuardado)
            {
                ErrorMessage = "Error al guardar el ticket. Por favor, intente de nuevo.";
                return;
            }

            navigationManager.NavigateTo($"/Carrito/Confirmar/{evento.eventoId}/{usuario.usuarioId}");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error inesperado: {ex.Message}";
        }
    }

}
